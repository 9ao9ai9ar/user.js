name: Test

on: pull_request

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest] # TODO Add macos-latest and windows-latest
        shell: [bash, dash, zsh, yash, mksh, ksh93u+m] # TODO Add ash, hush, osh, pbosh, posh, ksh88
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install esoteric shell
        if: ${{ contains(fromJSON('["zsh", "yash", "mksh", "ksh93u+m"]'), matrix.shell) }}
        run: |
          sudo apt update -y
          sudo apt install ${{ matrix.shell }} -y
      - name: Set shell
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo ln -sf /usr/bin/${{ matrix.shell }} /bin/sh
      - name: Set ksh93u+m shell
        if: ${{ matrix.shell == 'ksh93u+m' }}
        run: sudo ln -sf /usr/bin/ksh /bin/sh
      - name: Check exit status definitions
        run: |
          . ./updater.sh 2>/dev/null

          while IFS='=' read -r name code; do
              # "When reporting the exit status with the special parameter '?',
              # the shell shall report the full eight bits of exit status available."
              # ―https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_08_02
              # "exit [n]: If n is specified, but its value is not between 0 and 255
              # inclusively, the exit status is undefined."
              # ―https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_21
              [ "$code" -ge 0 ] && [ "$code" -le 255 ] || {
                  printf '%s %s\n' 'Undefined exit status in the definition:' \
                      "$name=$code." >&2
                  exit 70 # Internal software error.
              }
          done <<EOF
          $(exit_status_definitions)
          EOF
      - name: Check that running as root returns EX_USAGE
        run: ./updater.sh -x 2>/dev/null || { [ "$?" -eq 2 ] && exit 0; }
      - name: Tests setup
        run: |
          set +e
      - name: Check that passing a wrong option returns EX_USAGE
        run: ./updater.sh -x 2>/dev/null || { [ "$?" -eq 2 ] && exit 0; }
      - name: Check that --help returns EX_OK and not EX__BASE
        if: ${{ false }}   # TODO Fix this
        run: ./updater.sh -h > /dev/null
      - name: Check that if the profile doesn't have at least d-wx permissions, returns EX_UNAVAILABLE
        run: |
          unxable_temp_dir=$(mktemp -d)
          chmod 444 $unxable_temp_dir
          ./updater.sh -p $unxable_temp_dir > /dev/null 2>&1 || { [ "$?" -ne 69 ] && exit 1; }
          unwable_temp_dir=$(mktemp -d)
          chmod 111 $unwable_temp_dir
          ./updater.sh -p $unwable_temp_dir > /dev/null 2>&1 || { [ "$?" -ne 69 ] && exit 1; }
          exit 0
      - name: Check that if the profiles.ini doesn't exist, returns EX_NOINPUT
        run: |
          temp_dir=$(mktemp -d)
          chmod 777 $temp_dir
          ./updater.sh -l > /dev/null 2>&1 || { [ "$?" -ne 66 ] && exit 1; }
          exit 0
      - name: Check that if the profile requires root privileges, returns EX_CONFIG
        run: |
          temp_dir=$(mktemp -d)
          sudo chmod 777 $temp_dir
          sudo touch $temp_dir/user.js
          ./updater.sh -p $temp_dir > /dev/null 2>&1 || { [ "$?" -ne 78 ] && exit 1; }
          exit 0
      - name: Check that the profile gets updated
        if: ${{ false }}   # TODO Complete this test
        run: |
          temp_dir=$(mktemp -d)
          touch $temp_dir/user.js
          mkdir $temp_dir/userjs_test
          chown -R nonrootuser:nonrootuser $temp_dir
          ./updater.sh -p $temp_dir
