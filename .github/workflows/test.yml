name: Portability Testing
on:
  pull_request:
    paths:
      - '**.sh'
jobs:
  sh:
    defaults.run.shell: bash {0}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        script: [ updater.sh, prefsCleaner.sh ]
        os: [ macos-latest, ubuntu-latest ]
        shell: [ bash ]
        include:
          - os: ubuntu-latest
            shell: busybox
          - os: ubuntu-latest
            shell: dash
          - os: ubuntu-latest
            shell: ksh
          - os: ubuntu-latest
            shell: mksh
          - os: ubuntu-latest
            shell: posh
          - os: ubuntu-latest
            shell: yash
          - os: ubuntu-latest
            shell: zsh
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install POSIX compliant shell from the Ubuntu repositories
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        timeout-minutes: 3
        run: |
          sudo apt update -y &&
            sudo apt install -y ${{ matrix.shell }} ||
            exit
      - name: Point /bin/sh at the newly installed shell
        if: ${{ runner.os == 'Linux' }}
        run: sudo ln -sf /usr/bin/${{ matrix.shell }} /bin/sh || exit
      - name: Test dot sourcing and obtain exit status definitions
        timeout-minutes: 1
        run: |
          case ${{ matrix.shell }} in
            busybox)
              shell='${{ matrix.shell }} ash'
              ;;
            *)
              shell=${{ matrix.shell }}
              ;;
          esac &&
            eval "$shell" <<'EOF'
          [ -z "$ZSH_VERSION" ] || emulate sh
          (
            . ./${{ matrix.script }}
            [ "$?" -eq "$_EX_OK" ] || 
              echo '::warning file=${{ matrix.script }}::Dot sourcing failed'
            exit_status_definitions >>"$GITHUB_ENV"
          ) 2>/dev/null
          EOF
          [ "$?" -eq "$_EX_OK" ] || exit
      - name: Test running as root
        timeout-minutes: 1
        run: |
          sudo ./${{ matrix.script }} 2>/dev/null
          [ "$?" -eq "$_EX_USAGE" ]
      - name: Test passing an unsupported option to the script
        timeout-minutes: 1
        run: |
          ./${{ matrix.script }} -9 2>/dev/null
          [ "$?" -eq "$_EX_USAGE" ]
      - name: Test the -h option
        timeout-minutes: 1
        run: ./${{ matrix.script }} -h >/dev/null
      - name: Test profile directory missing write or search permissions
        timeout-minutes: 1
        run: |
          unxable_temp_dir=$(mktemp -d) &&
            chmod 666 "$unxable_temp_dir" &&
            ./${{ matrix.script }} -p "$unxable_temp_dir" 2>/dev/null
          unxable_status=$?
          unwable_temp_dir=$(mktemp -d) &&
            chmod 555 "$unwable_temp_dir" &&
            ./${{ matrix.script }} -p "$unwable_temp_dir" 2>/dev/null
          unwable_status=$?
          [ "$unxable_status" -eq "$_EX_UNAVAILABLE" ] &&
            [ "$unwable_status" -eq "$_EX_UNAVAILABLE" ]
      - name: Test nonexistent profiles.ini
        timeout-minutes: 1
        run: |
          (HOME=/nosuchdir ./${{ matrix.script }} -l) 2>/dev/null
          [ "$?" -eq "$_EX_NOINPUT" ]
      - name: Test profile directory contains certain root owned files
        if: ${{ matrix.script == 'updater.sh' }}
        timeout-minutes: 1
        run: |
          temp_dir=$(mktemp -d) &&
            chmod 777 "$temp_dir" &&
            sudo touch "$temp_dir/user.js" &&
            ./${{ matrix.script }} -p "$temp_dir" 2>/dev/null
          [ "$?" -eq "$_EX_CONFIG" ]
      - name: Test noninteractive run (updater.sh)
        if: ${{ matrix.script == 'updater.sh' }}
        timeout-minutes: 1
        run: |
          temp_dir=$(mktemp -d) &&
            cp ./${{ matrix.script }} "$temp_dir" && (
              cd "$temp_dir" &&
              yes | tr -d '\n' | ./${{ matrix.script }} -d
            ) 2>/dev/null &&
            diff ./user.js "$temp_dir/user.js" >/dev/null
      - name: Test noninteractive run (prefsCleaner.sh)
        if: ${{ matrix.script == 'prefsCleaner.sh' }}
        timeout-minutes: 1
        run: |
          temp_dir=$(mktemp -d) &&
            cp ./${{ matrix.script }} "$temp_dir" && (
              cd "$temp_dir" &&
              touch .parentlock prefs.js user.js &&
              ln -s 127.0.0.2:999 lock &&
              yes | tr -d '\n' | ./${{ matrix.script }} -ds
            ) 2>/dev/null
